// <auto-generated />
using System;
using ASystems.DeskReservation.Web.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASystems.DeskReservation.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231115135706_SeedDataUserDataFixed")]
    partial class SeedDataUserDataFixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Desks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10398b3a-4bf8-4c11-bf1d-dfbacd2f9029"),
                            Name = "Desk1"
                        },
                        new
                        {
                            Id = new Guid("22b22603-8add-47c4-9628-230e3b5258f3"),
                            Name = "Desk2"
                        },
                        new
                        {
                            Id = new Guid("4e4c9cea-f5f8-41d5-8ed1-69be42990eb0"),
                            Name = "Desk3"
                        },
                        new
                        {
                            Id = new Guid("7c45b8b6-66de-4a0a-ab72-848253f5b436"),
                            Name = "Desk4"
                        },
                        new
                        {
                            Id = new Guid("dfc29186-e73a-4599-9d0e-8fc944a276fd"),
                            Name = "Desk5"
                        },
                        new
                        {
                            Id = new Guid("2b8d1aa8-b1b6-406b-9db3-b80913b44c7d"),
                            Name = "Desk6"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26"),
                            ConcurrencyStamp = "c7ce239c-b53a-450b-8b7a-255d08c7f419",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6844d9d3-a402-5942-755d-38e6d163e820"),
                            ConcurrencyStamp = "dadd79c6-69f4-4dc7-8a50-81260754e6bc",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96f45e8c-668e-4de4-851d-dc3a7dfd31a4",
                            Email = "armir.keta@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Armir",
                            LastName = "Keta",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARMIR.KETA@GMAIL.COM",
                            NormalizedUserName = "ARMIRKETA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxEr0jXdAJC7OY8j212imKjhXhuZKzqmEVgjb6BuDNJKTKgAE3uhsZXaRhZdwlfDg==",
                            PhoneNumber = "0695586306",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "armirketa"
                        },
                        new
                        {
                            Id = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0f00a56-9162-4918-a722-27b0ba995e95",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User1",
                            LastName = "User1",
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@gmail.com",
                            NormalizedUserName = "user1user1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMoWRBg1WA7H4hb5I2QZcngweI7g4/LZUm90gJBj1oHrvmPxyU58A0Bnz26Uw6/mPQ==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1user1"
                        },
                        new
                        {
                            Id = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa5f8f43-3bf6-4c8c-8dfd-29665089292e",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@gmail.com",
                            NormalizedUserName = "user2user2",
                            PasswordHash = "AQAAAAEAACcQAAAAECWaDLopn1IRduG6d52DFymearv1XGzQhqdRwXwmFYHGWe8SgyZvl5xwOo4/NIzVAg==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2user2"
                        },
                        new
                        {
                            Id = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7040064-6caf-4a3c-8d56-0088a3002005",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User3",
                            LastName = "User3",
                            LockoutEnabled = false,
                            NormalizedEmail = "user3@gmail.com",
                            NormalizedUserName = "user3user3",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKnZFVWCstuGmecgrEFxoORR99X6zGYQwPcoWyRo0cy15yvST2U4Gv8Zb3dBZevWw==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user3user3"
                        },
                        new
                        {
                            Id = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6df462e-3166-4dbf-9f6e-785f762f8775",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User4",
                            LastName = "User4",
                            LockoutEnabled = false,
                            NormalizedEmail = "user4@gmail.com",
                            NormalizedUserName = "user4user4",
                            PasswordHash = "AQAAAAEAACcQAAAAEDrKfn7mZLQnUgP5F4eMUCnMTUhiq5du1ih8YxJcEwqZ8fI6GL3GGD0kpVC1aSacrw==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user4user4"
                        },
                        new
                        {
                            Id = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36dc5553-1a92-458c-a6ef-00e3a0e32e91",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User5",
                            LastName = "User5",
                            LockoutEnabled = false,
                            NormalizedEmail = "user5@gmail.com",
                            NormalizedUserName = "user5user5",
                            PasswordHash = "AQAAAAEAACcQAAAAEDm4gIPHMWqkmwZuQ2LCdhUBzTbTkVuAvgxSy5Nkj3s1ncolkYyeWWFAcdRARpU+Bg==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user5user5"
                        },
                        new
                        {
                            Id = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc1df919-8c56-434d-908c-62aef8541cb3",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User6",
                            LastName = "User6",
                            LockoutEnabled = false,
                            NormalizedEmail = "user6@gmail.com",
                            NormalizedUserName = "user6user6",
                            PasswordHash = "AQAAAAEAACcQAAAAELS16pNZcMAGSZ+1bLEnajgXDgZ5FrXZ33gmoBOp875Os5ksYI3XcD0nXObD2blC0g==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user6user6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            RoleId = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26")
                        },
                        new
                        {
                            UserId = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Desk", "Desk")
                        .WithMany("Reservations")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
