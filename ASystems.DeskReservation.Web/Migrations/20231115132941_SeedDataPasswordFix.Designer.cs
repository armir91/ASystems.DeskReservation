// <auto-generated />
using System;
using ASystems.DeskReservation.Web.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASystems.DeskReservation.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231115132941_SeedDataPasswordFix")]
    partial class SeedDataPasswordFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Desks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d254f4c-f968-4cea-bc9d-e3bcd1db9d2b"),
                            Name = "Desk1"
                        },
                        new
                        {
                            Id = new Guid("ae4147e6-49b0-40bd-8980-5658b46166a5"),
                            Name = "Desk2"
                        },
                        new
                        {
                            Id = new Guid("7b1f2275-8ebb-491a-a458-1f729c75f80e"),
                            Name = "Desk3"
                        },
                        new
                        {
                            Id = new Guid("b761c364-99f1-4ae8-8216-5387f408541a"),
                            Name = "Desk4"
                        },
                        new
                        {
                            Id = new Guid("7283636b-f10d-4fa3-a395-5132a3f9c30c"),
                            Name = "Desk5"
                        },
                        new
                        {
                            Id = new Guid("d3e2f979-f721-44c5-8eb5-097394b72284"),
                            Name = "Desk6"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26"),
                            ConcurrencyStamp = "2b9d14ea-6545-4595-82aa-930cb10e6f32",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6844d9d3-a402-5942-755d-38e6d163e820"),
                            ConcurrencyStamp = "00edb8c3-9c6d-4435-b1c9-3319c6bc6324",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1ed51e1-d70c-4bab-891a-5666fe366d28",
                            Email = "armir.keta@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Armir",
                            LastName = "Keta",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0695586306",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf0c9c87-590c-4957-90a1-81a730dc7168",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User1",
                            LastName = "User1",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1aae8597-4c4b-442d-ba7a-cff2e7ce0ff3",
                            Email = "user2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5e06f0d-bfb1-4998-9a1b-1511439dd3d4",
                            Email = "user3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User3",
                            LastName = "User3",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d2858bb-94be-437c-b7c5-cd520321310f",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User4",
                            LastName = "User4",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c3e9097-f6a1-4495-9689-1299d950cbca",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User5",
                            LastName = "User5",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51d0d875-7152-425e-b776-acb3f1946826",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User6",
                            LastName = "User6",
                            LockoutEnabled = false,
                            PasswordHash = "Admin*123",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            RoleId = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26")
                        },
                        new
                        {
                            UserId = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Desk", "Desk")
                        .WithMany("Reservations")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
