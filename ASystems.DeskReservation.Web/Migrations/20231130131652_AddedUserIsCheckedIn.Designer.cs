// <auto-generated />
using System;
using ASystems.DeskReservation.Web.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASystems.DeskReservation.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231130131652_AddedUserIsCheckedIn")]
    partial class AddedUserIsCheckedIn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Desks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13b6cd32-f22f-481e-8c3c-1dbeb62fc8fd"),
                            Name = "Desk1"
                        },
                        new
                        {
                            Id = new Guid("b326520a-6a97-4460-a770-b082637b7dbd"),
                            Name = "Desk2"
                        },
                        new
                        {
                            Id = new Guid("9d922658-5287-4954-a5b4-bb2a015e8716"),
                            Name = "Desk3"
                        },
                        new
                        {
                            Id = new Guid("11f940ad-086c-4498-a8f8-f9db7ea90f1b"),
                            Name = "Desk4"
                        },
                        new
                        {
                            Id = new Guid("2f87db24-73ca-44d3-83cd-ce18b6881150"),
                            Name = "Desk5"
                        },
                        new
                        {
                            Id = new Guid("1cb56f4b-a7e3-4936-bebb-192140d8f5ee"),
                            Name = "Desk6"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26"),
                            ConcurrencyStamp = "4e668d7d-54c8-41f0-8e3b-12dd2d2ccbb4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6844d9d3-a402-5942-755d-38e6d163e820"),
                            ConcurrencyStamp = "6d28a81a-ee9a-47b5-b42e-4deb4cb7a3ba",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("CheckedIn")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "8028a9b1-cb1a-496d-863c-1563b24ac76c",
                            Email = "armir.keta@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Armir",
                            LastName = "Keta",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARMIR.KETA@GMAIL.COM",
                            NormalizedUserName = "ARMIR.KETA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnH2EbWRJ4NF9YySZw4JrdrliZZ8SLYMApAGIoQ0q94uk+rAEf0BQeawW4b//ZnFA==",
                            PhoneNumber = "0695586306",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aceaf6b2-bff3-4967-8b2f-d9f08aabc38a",
                            TwoFactorEnabled = false,
                            UserName = "armir.keta@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "796b3e35-a84f-416d-ae3d-757f5a486a3a",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User1",
                            LastName = "User1",
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@gmail.com",
                            NormalizedUserName = "user1@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqTuEtXNfzdRanrS/ajFRikooeSy0FJiwJFiRM3G86e47PgXvA24x+pupoxJgIPdw==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ced31b6-f5b3-4f4f-ae6b-0900962323a1",
                            TwoFactorEnabled = false,
                            UserName = "user1@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "df6b1ee3-a69a-46bf-88bc-01b3320a19b5",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@gmail.com",
                            NormalizedUserName = "user2@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJPmQ82mO/R0DMeup5ukLHniDx+DCmM1tT49NC1y2dkDbnqqbtP87gsOG1OpnCiIuw==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "588fd0b9-8e30-463f-88d5-dc637bdde0cc",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "12b97b37-878e-4bf7-b1e5-d64e2a82fe8e",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User3",
                            LastName = "User3",
                            LockoutEnabled = false,
                            NormalizedEmail = "user3@gmail.com",
                            NormalizedUserName = "user3@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAED1DP26iy02zPn+hMqCtdL6cZTs0Wj+DFuXvCD6Qrbr6bvzOpRYlGEk0WsWgPDJAhg==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "226453bd-d7d8-4be1-975e-d4c36c6b2015",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "b713b59f-40d9-48d2-be35-25a9b2305ccf",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User4",
                            LastName = "User4",
                            LockoutEnabled = false,
                            NormalizedEmail = "user4@gmail.com",
                            NormalizedUserName = "user4@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFeVIgq1IEP4Gh1EX0+DaoMSdgLkaqpvcVlDM7hBMuG6Vpyvz8uGvmiY1bFkLYRLQ==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e52e830b-4940-42ec-9044-7ff99b31ede6",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "a9dec0cb-4639-43c3-914c-d0cada1dd939",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User5",
                            LastName = "User5",
                            LockoutEnabled = false,
                            NormalizedEmail = "user5@gmail.com",
                            NormalizedUserName = "user5@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJlE5zzfqXPFYhQmGjovZ2JTIK/FSEbP0wpcvkyI5WwZulawp7yYqxf+hPkTu6tGaw==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b09f4780-b986-43d2-8773-08407848939b",
                            TwoFactorEnabled = false,
                            UserName = "user5@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "2b7bf830-d43e-4238-a822-34b13bedce6f",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User6",
                            LastName = "User6",
                            LockoutEnabled = false,
                            NormalizedEmail = "user6@gmail.com",
                            NormalizedUserName = "user6@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGoJFLV9NeFz0IGDw4CVazxF3u6KzIQ7S2M6rcaOVoIMGN+NQUrUiO4ohD+iJj5jw==",
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0397608-3a81-40fc-b074-c1de86847468",
                            TwoFactorEnabled = false,
                            UserName = "user6@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            RoleId = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26")
                        },
                        new
                        {
                            UserId = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Desk", "Desk")
                        .WithMany("Reservations")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
