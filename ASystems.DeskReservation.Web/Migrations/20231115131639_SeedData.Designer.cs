// <auto-generated />
using System;
using ASystems.DeskReservation.Web.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASystems.DeskReservation.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231115131639_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Desks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1211ab66-f499-49e5-9242-08a2d7739575"),
                            Name = "Desk1"
                        },
                        new
                        {
                            Id = new Guid("7f6ee906-fd7b-4474-9d86-daba840dbfcf"),
                            Name = "Desk2"
                        },
                        new
                        {
                            Id = new Guid("26583fde-99e2-427a-bbc7-581308a7bc60"),
                            Name = "Desk3"
                        },
                        new
                        {
                            Id = new Guid("c5760b2c-0167-4e7f-be7d-aad4e697ba8b"),
                            Name = "Desk4"
                        },
                        new
                        {
                            Id = new Guid("db1b3f57-d2e7-4ea3-a436-5c58243f28e2"),
                            Name = "Desk5"
                        },
                        new
                        {
                            Id = new Guid("909479f7-86a3-4ea2-b20d-5d8519e4b177"),
                            Name = "Desk6"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26"),
                            ConcurrencyStamp = "3b1e2a6f-6aad-4126-b0e2-eb2d298daec0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6844d9d3-a402-5942-755d-38e6d163e820"),
                            ConcurrencyStamp = "5eaab492-4a96-4f8e-9145-d5a1cc34fd8b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aaf259ad-84db-4c74-8d0a-67d6d1cb24a1",
                            Email = "armir.keta@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Armir",
                            LastName = "Keta",
                            LockoutEnabled = false,
                            PhoneNumber = "0695586306",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3af2188-a13a-4818-b479-c81b53a562c2",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User1",
                            LastName = "User1",
                            LockoutEnabled = false,
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b6fed5d-9ad9-4538-9b86-5756a1b6c3f2",
                            Email = "user2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55bf6646-f5b0-41a1-8294-b065744b73a7",
                            Email = "user3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User3",
                            LastName = "User3",
                            LockoutEnabled = false,
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "065dc0fb-f5d7-496b-89d6-982f2d9c82c1",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User4",
                            LastName = "User4",
                            LockoutEnabled = false,
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ef2f53d-9052-433b-b5a1-a10935da0402",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User5",
                            LastName = "User5",
                            LockoutEnabled = false,
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d4e424e-7c04-407c-9b8b-ef4efd1047bb",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User6",
                            LastName = "User6",
                            LockoutEnabled = false,
                            PhoneNumber = "0690000000",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("43bd1265-cad9-e0a6-2c99-0b0a82652dca"),
                            RoleId = new Guid("ce8cc445-2d2e-bd7f-ea1a-fc51c7c6ad26")
                        },
                        new
                        {
                            UserId = new Guid("d7d40ac2-e96f-5977-aa27-a0c99bff6710"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("10e41cc5-24c1-0ea1-0db5-e4b97fc2af39"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("8923b3aa-bc22-5ac2-6f60-6eb525ffdc56"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("7f1cf39b-62f0-6a93-96d3-c8bd1f8f2ff3"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("b0974dc7-ae1e-7e25-44aa-9d5bade97baf"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        },
                        new
                        {
                            UserId = new Guid("2edfef70-b0c9-0786-9795-c442636b55fb"),
                            RoleId = new Guid("6844d9d3-a402-5942-755d-38e6d163e820")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Reservation", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Desk", "Desk")
                        .WithMany("Reservations")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ASystems.DeskReservation.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.Desk", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ASystems.DeskReservation.Web.Data.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
